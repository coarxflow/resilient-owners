//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
using System.Collections;
using UnityEngine;
using ColossalFramework;
using ColossalFramework.Globalization;
using ColossalFramework.UI;

namespace ResilientOwners
{
	public class ResilientUI : MonoBehaviour
	{

		ResilientBuildings m_info;

		ZonedBuildingWorldInfoPanel m_zonedBuildingInfoPanel;
		float m_zonedBuildingInfoPanelInitialHeight = 0f;

		UILabel m_historyTitleLabel;
		UIMultilineTextField m_descriptionTextField;
		StatesButton m_resilientStateButton;
		UILabel m_familiesHistoryLabel;
		UILabel m_activatedDateLabel;
		UILabel m_statsLabel;
		UILabel m_statsLabel2;

		UICurrencyWrapper income =  new UICurrencyWrapper(0L);
		UIGoodsWrapper industryGoods =  new UIGoodsWrapper(0);
		UIGoodsWrapper industryGoods2 =  new UIGoodsWrapper(0);

		ushort m_currentSelectedBuildingID;

		public static ResilientUI Install(GameObject go, ResilientBuildings info)
		{
			ResilientUI rui = go.AddComponent<ResilientUI>();
			//ResilientUI rui = new ResilientUI();
			rui.m_info = info;

			rui.m_zonedBuildingInfoPanel = GameObject.Find("(Library) ZonedBuildingWorldInfoPanel").GetComponent<ZonedBuildingWorldInfoPanel>();

			rui.AddComponents();

			return rui;
		}

		public static void Uninstall(ResilientUI rui)
		{

		}

		/********** UI building ***********/

		void AddComponents()
		{
			m_zonedBuildingInfoPanelInitialHeight = m_zonedBuildingInfoPanel.component.height;

			m_historyTitleLabel = m_zonedBuildingInfoPanel.component.AddUIComponent<UILabel> ();
			m_historyTitleLabel.name = "History Title";
			m_historyTitleLabel.text = Localization.GetHistoryTitle();

			m_descriptionTextField = m_zonedBuildingInfoPanel.component.AddUIComponent<UIMultilineTextField> ();
			m_descriptionTextField.name = "Building Description";
			m_descriptionTextField.text = "Enter description";
			m_descriptionTextField.textScale = 0.8f;
			m_descriptionTextField.width = m_zonedBuildingInfoPanel.component.width/2;
			m_descriptionTextField.height = 100f;
			m_descriptionTextField.disabledTextColor = new Color32(7, 7, 7, 255);
			m_descriptionTextField.eventTextSubmitted += (component, param) =>
			{
				SaveDescription(param);
			};
			m_descriptionTextField.title = "Description";
			m_descriptionTextField.showTitle = true;
			m_descriptionTextField.defaultText = Localization.GetDescriptionEmpty();
			m_descriptionTextField.eventHeightChange += (component, height) => {
				ResizePanelHeight(height);
			};

			int spriteWidth = 32;
			int spriteHeight = 32;
			string[] tooltips = {
				Mod.modName+": disabled", 
				Mod.modName+": history is enabled",
				Mod.modName+": history and resiliency enabled"
			};
			m_resilientStateButton = new StatesButton(m_zonedBuildingInfoPanel.component, spriteWidth, spriteHeight, 3, "icons.book.png", "ResilientOwners", tooltips);

			m_resilientStateButton.msb.eventActiveStateIndexChanged += (component, value) => {

				if(!m_allowEvents)
					return;

				switch(value)
				{
				case 0:
					m_info.UnsuscribeBuilding(m_currentSelectedBuildingID);
					HideHistory();
					break;
				case 1:
					m_info.AddBuilding(m_currentSelectedBuildingID, false);
					ShowHistory();
					break;
				case 2:
					m_info.AddBuilding(m_currentSelectedBuildingID, true);
					ShowHistory();
					break;
				}
			};
			m_resilientStateButton.msb.AlignTo(m_zonedBuildingInfoPanel.component, UIAlignAnchor.TopRight);
			m_resilientStateButton.msb.relativePosition += new Vector3 (-50f, 50f, 0f);

			m_familiesHistoryLabel = m_zonedBuildingInfoPanel.component.AddUIComponent<UILabel> ();
			m_familiesHistoryLabel.name = "Families History";
			m_familiesHistoryLabel.text = Localization.GetEmptyHouse();
			m_familiesHistoryLabel.textScale = 0.8f;
			m_familiesHistoryLabel.width = 2*m_zonedBuildingInfoPanel.component.width/3f;
			m_familiesHistoryLabel.wordWrap = true;

			m_activatedDateLabel = m_zonedBuildingInfoPanel.component.AddUIComponent<UILabel> ();
			m_activatedDateLabel.name = "Activation Date";
			m_activatedDateLabel.text = Localization.GetActivationDate();
			m_activatedDateLabel.textScale = 0.8f;
			m_activatedDateLabel.width = m_zonedBuildingInfoPanel.component.width/2;

			m_statsLabel = m_zonedBuildingInfoPanel.component.AddUIComponent<UILabel> ();
			m_statsLabel.name = "Stats";
			m_statsLabel.text = Localization.GetAccumulatedIncome();
			m_statsLabel.textScale = 0.8f;
			m_statsLabel.width = m_zonedBuildingInfoPanel.component.width/2;

			m_statsLabel2 = m_zonedBuildingInfoPanel.component.AddUIComponent<UILabel> ();
			m_statsLabel2.name = "Stats 2";
			m_statsLabel2.text = "";
			m_statsLabel2.textScale = 0.8f;
			m_statsLabel2.width = m_zonedBuildingInfoPanel.component.width/2;

//			m_zonedBuildingInfoPanel.component.eventVisibilityChanged +=(component, param) =>
//			{
//				if(param)
//					OnSelected();
//					//m_info.StartCoroutine(OnSelected());//StartCoroutine on a MonoBehaviour...
//			};

			m_zonedBuildingInfoPanel.component.eventPositionChanged += (inst1, inst2) =>
			{
				if(m_zonedBuildingInfoPanel.component.isVisible)
					OnSelected();
			};


		}

		/********** Event Handlers ***************/

		bool m_allowEvents = true;
		void SaveDescription(string desc)
		{
			if (!m_allowEvents)
				return;
			int buildIndex = m_info.GetResilientBuildingIndex (m_currentSelectedBuildingID);
			if (buildIndex != -1) {
				ResilientBuildings.ResilientInfo ri = m_info.m_resilients [buildIndex];
				ri.description = desc;
				m_info.m_resilients [buildIndex] = ri;
			}
		}

		/********** UI update methods ***************/

		void OnSelected()
		{
			//get selected building ID (after waiting it has been actualized)
			FieldInfo baseSub = m_zonedBuildingInfoPanel.GetType().GetField("m_InstanceID", BindingFlags.NonPublic | BindingFlags.Instance);
			InstanceID instanceId = (InstanceID)baseSub.GetValue(m_zonedBuildingInfoPanel);
			if (instanceId.Type == InstanceType.Building && instanceId.Building != 0) {
				if(m_currentSelectedBuildingID == instanceId.Building) //no update needed
					return;
				m_currentSelectedBuildingID = instanceId.Building;
			} else
			{
				m_currentSelectedBuildingID = 0;
			}

			int buildIndex = m_info.GetResilientBuildingIndex (m_currentSelectedBuildingID);
			m_allowEvents = false;
			if (buildIndex != -1) {
				if(m_info.m_resilients[buildIndex].resiliencyActivated)
					m_resilientStateButton.SetState(2);
				else
					m_resilientStateButton.SetState(1);
				ShowHistory();
			} else {
				m_resilientStateButton.SetState(0);
				HideHistory();
			}

			m_allowEvents = true;

			m_zonedBuildingInfoPanel.component.Invalidate();
		}

		public void HideHistory()
		{
			m_descriptionTextField.isVisible = false;
			m_familiesHistoryLabel.isVisible = false;
			m_activatedDateLabel.isVisible = false;
			m_statsLabel.isVisible = false;
			m_statsLabel2.isVisible = false;
			m_zonedBuildingInfoPanel.component.height = m_zonedBuildingInfoPanelInitialHeight;
		}

		public void ShowHistory()
		{
			int buildIndex = m_info.GetResilientBuildingIndex (m_currentSelectedBuildingID);

			m_descriptionTextField.text = m_info.m_resilients [buildIndex].description;
			m_descriptionTextField.isVisible = true;

			if(Singleton<BuildingManager>.instance.m_buildings.m_buffer[m_currentSelectedBuildingID].Info.m_class.m_service == ItemClass.Service.Residential)
				m_familiesHistoryLabel.text = m_info.GetFamiliesList(buildIndex);
			else
				m_familiesHistoryLabel.text = m_info.GetWorkersHistoryList(buildIndex);
			m_familiesHistoryLabel.isVisible = true;

			m_activatedDateLabel.text = Localization.GetActivationDate() + ' ' + m_info.m_resilients [buildIndex].activatedDate.Date.ToString("dd/MM/yyyy");
			m_activatedDateLabel.isVisible = true;

			m_statsLabel.isVisible = true;
			m_statsLabel2.isVisible = true;

			ResizePanelHeight(0f);
		}

		float last_desc_height;
		public void ResizePanelHeight(float desc_height)
		{
			if(desc_height == 0f)
				desc_height = last_desc_height;

			float padding = 20f;

			desc_height = m_descriptionTextField.getComposedHeight();
			float hist_height = m_familiesHistoryLabel.height + m_activatedDateLabel.height + m_statsLabel.height + m_statsLabel2.height + 3*padding;

			float add_height = Mathf.Max(desc_height, hist_height);

			m_historyTitleLabel.AlignTo(m_zonedBuildingInfoPanel.component, UIAlignAnchor.BottomLeft);
			m_historyTitleLabel.relativePosition += new Vector3 (0, -add_height+m_historyTitleLabel.height, 0f);

			m_familiesHistoryLabel.AlignTo(m_zonedBuildingInfoPanel.component, UIAlignAnchor.BottomLeft);
			m_activatedDateLabel.AlignTo(m_zonedBuildingInfoPanel.component, UIAlignAnchor.BottomLeft);
			m_statsLabel.AlignTo(m_zonedBuildingInfoPanel.component, UIAlignAnchor.BottomLeft);
			m_statsLabel2.AlignTo(m_zonedBuildingInfoPanel.component, UIAlignAnchor.BottomLeft);
			m_activatedDateLabel.relativePosition += new Vector3 (m_zonedBuildingInfoPanel.component.width/2, -add_height+m_historyTitleLabel.height+m_activatedDateLabel.height, 0f);
			m_statsLabel.relativePosition += new Vector3 (m_zonedBuildingInfoPanel.component.width/2, -add_height+m_historyTitleLabel.height+m_activatedDateLabel.height+m_statsLabel.height + padding, 0f);
			m_statsLabel2.relativePosition += new Vector3 (m_zonedBuildingInfoPanel.component.width/2, -add_height+m_historyTitleLabel.height+m_activatedDateLabel.height+m_statsLabel.height+m_statsLabel.height + 2*padding, 0f);
			m_familiesHistoryLabel.relativePosition += new Vector3 (m_zonedBuildingInfoPanel.component.width/2, -add_height+m_historyTitleLabel.height+m_activatedDateLabel.height+m_statsLabel.height+m_statsLabel2.height+m_familiesHistoryLabel.height + 3*padding, 0f);

			m_descriptionTextField.AlignTo(m_zonedBuildingInfoPanel.component, UIAlignAnchor.BottomLeft);
			m_descriptionTextField.relativePosition += new Vector3 (0, -add_height+m_historyTitleLabel.height+desc_height, 0f);


			m_zonedBuildingInfoPanel.component.height = m_zonedBuildingInfoPanelInitialHeight + add_height;

			last_desc_height = desc_height;
		}

		private void Update()
		{
			if(m_currentSelectedBuildingID <= 0)
				return;

			int buildIndex = m_info.GetResilientBuildingIndex (m_currentSelectedBuildingID);
			if(buildIndex != -1)
			{
				income.Check(m_info.m_resilients [buildIndex].totalIncome);
				m_statsLabel.text = Localization.GetAccumulatedIncome() + income.result;

				BuildingInfo buildinfo = Singleton<BuildingManager>.instance.m_buildings.m_buffer[m_currentSelectedBuildingID].Info;
				switch(buildinfo.m_class.m_service)
				{
					case ItemClass.Service.Commercial:
						m_statsLabel2.text = "Clients served : " + m_info.m_resilients [buildIndex].totalVisits + " - Inside now : " + m_info.m_resilients [buildIndex].currentVisits;
						break;
					case ItemClass.Service.Industrial:
					CODebug.Log(LogChannel.Modding, "examine AI "+buildinfo.m_buildingAI+" for "+Singleton<BuildingManager>.instance.GetBuildingName(m_currentSelectedBuildingID, default(InstanceID)));
						bool extractor = buildinfo.m_buildingAI.GetType().Equals(typeof(IndustrialExtractorAI));

						if(extractor)
						{
							industryGoods.Check(m_info.m_resilients [buildIndex].goodsBuffer2, buildinfo.m_class.m_subService, true);
							industryGoods2.Check(m_info.m_resilients [buildIndex].goodsBuffer3, buildinfo.m_class.m_subService, true);
							m_statsLabel2.text = "Exported : " + industryGoods.result +", Stock : " + industryGoods2.result;
						}
						else
						{
							industryGoods.Check(m_info.m_resilients [buildIndex].goodsBuffer2, buildinfo.m_class.m_subService, false);
							industryGoods2.Check(m_info.m_resilients [buildIndex].goodsBuffer4, buildinfo.m_class.m_subService, false);
							m_statsLabel2.text = "Imported : " + industryGoods.result +", Exported " + industryGoods2.result;
						}
						break;
					default:
						m_statsLabel2.isVisible = false;
						break;
				}
	
			}
		}

	}
}

