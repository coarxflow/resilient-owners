//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
using UnityEngine;
using ColossalFramework;
using ColossalFramework.Globalization;
using ColossalFramework.UI;

namespace ResilientOwners
{
	public class ResilientUI
	{

		ResilientBuildings m_info;

		ZonedBuildingWorldInfoPanel m_zonedBuildingInfoPanel;
		float m_zonedBuildingInfoPanelInitialHeight = 0f;

		UIMultilineTextField m_descriptionTextField;
		UICheckBox m_resilientCheckBox;

		ushort m_currentSelectedBuildingID;

		public static ResilientUI Install(ResilientBuildings info)
		{
			ResilientUI rui = new ResilientUI();
			rui.m_info = info;

			rui.m_zonedBuildingInfoPanel = GameObject.Find("(Library) ZonedBuildingWorldInfoPanel").GetComponent<ZonedBuildingWorldInfoPanel>();

			rui.AddComponents();

			return rui;
		}

		public static void Uninstall(ResilientUI rui)
		{

		}

		/********** UI building ***********/

		void AddComponents()
		{

			m_resilientCheckBox = m_zonedBuildingInfoPanel.component.AttachUIComponent(UITemplateManager.GetAsGameObject("OptionsCheckBoxTemplate")) as UICheckBox;
			m_resilientCheckBox.name = "ModTools Button";
			m_resilientCheckBox.text = "Toggle Resilient";
            //button.textScale = 0.8f;
			m_resilientCheckBox.width = 120;
			m_resilientCheckBox.height = 40;
//            button.normalBgSprite = "ButtonMenu";
//            button.disabledBgSprite = "ButtonMenuDisabled";
//            button.hoveredBgSprite = "ButtonMenuHovered";
//            button.focusedBgSprite = "ButtonMenu";
//            button.pressedBgSprite = "ButtonMenuPressed";
//            button.textColor = new Color32(255, 255, 255, 255);
//            button.disabledTextColor = new Color32(7, 7, 7, 255);
//            button.hoveredTextColor = new Color32(255, 255, 255, 255);
//            button.focusedTextColor = new Color32(255, 255, 255, 255);
//            button.pressedTextColor = new Color32(30, 30, 44, 255);
			m_resilientCheckBox.eventCheckChanged += (component, param) =>
			{
				ToogleResilient(param);
			};
			m_resilientCheckBox.AlignTo(m_zonedBuildingInfoPanel.component, UIAlignAnchor.TopRight);
            //button.relativePosition += offset;

			m_descriptionTextField = m_zonedBuildingInfoPanel.component.AddUIComponent<UIMultilineTextField> ();
			m_descriptionTextField.name = "Building Description";
			m_descriptionTextField.text = "Enter description";
			m_descriptionTextField.textScale = 0.8f;
			m_descriptionTextField.width = m_zonedBuildingInfoPanel.component.width/3;
			m_descriptionTextField.height = 70;
//			textfield.normalBgSprite = "ButtonMenu";
//			textfield.disabledBgSprite = "ButtonMenuDisabled";
//			textfield.hoveredBgSprite = "ButtonMenuHovered";
//			textfield.focusedBgSprite = "ButtonMenu";
			m_descriptionTextField.textColor = new Color32(255, 255, 255, 255);
			m_descriptionTextField.disabledTextColor = new Color32(7, 7, 7, 255);
			m_descriptionTextField.eventTextSubmitted += (component, param) =>
			{
				SaveDescription(param);
			};
			m_descriptionTextField.AlignTo(m_zonedBuildingInfoPanel.component, UIAlignAnchor.BottomLeft);
			m_descriptionTextField.relativePosition += new Vector3 (10f, 40f, 0f);

			m_descriptionTextField.title = "Description";
			m_descriptionTextField.showTitle = true;

			m_descriptionTextField.eventHeightChange += (component, height) => {
				ResizePanelHeight(height);
			};

//			UITextField tf2 = (UITextField) GameObject.Instantiate(zonedBuildingInfoPanel.Find<UITextField>("BuildingName"));
//
//			tf2.text = "Je suis la";
//			tf2.AlignTo (zonedBuildingInfoPanel.component, UIAlignAnchor.BottomRight);

			UIMultiStateButton msb = m_zonedBuildingInfoPanel.component.AddUIComponent<UIMultiStateButton> ();
			msb.name = "Resilient MultiStateButton";
			msb.backgroundSprites.AddState();
			msb.backgroundSprites[0].normal = "TextFieldPanel";
			msb.backgroundSprites.AddState();
			msb.backgroundSprites[1].normal = "TextFieldPanelHovered";
			msb.AlignTo(m_zonedBuildingInfoPanel.component, UIAlignAnchor.BottomRight);
			msb.eventActiveStateIndexChanged += (component, value) => {
				CODebug.Log(LogChannel.Modding, "multistate button in state "+value);

			};
			//msb.relativePosition += new Vector3 (100f, 50f, 0f);


			m_zonedBuildingInfoPanel.component.eventVisibilityChanged +=(component, param) =>
			{
				OnSelected();
			};

			m_zonedBuildingInfoPanelInitialHeight = m_zonedBuildingInfoPanel.component.height;

//			UIButton tabTemplate = (UIButton)builtinTabstrip.tabs[0];

//			int spriteWidth = 31;
//			int spriteHeight = 31;
//			string[] spriteNames = {
//				"CrossingsButtonBg", 
//				"CrossingsButtonBgPressed", 
//				"CrossingsButtonBgHovered", 
//				"CrossingsIcon", 
//				"CrossingsIconPressed", 
//			};
//
//			UITextureAtlas atlas = CreateTextureAtlas("sprites.png", "CrossingsUI", tabTemplate.atlas.material, spriteWidth, spriteHeight, spriteNames);
//
		}

		/********** Event Handlers ***************/

		bool m_allowEvents = true;
		void ToogleResilient(bool on)
		{
			if (!m_allowEvents)
				return;
			if (m_currentSelectedBuildingID != 0)
			{
				if(m_info.GetResilientBuildingIndex(m_currentSelectedBuildingID) != -1 && !on)
					m_info.RemoveBuilding(m_currentSelectedBuildingID);
				else if(on)
					m_info.AddBuilding(m_currentSelectedBuildingID);
				//					if (this.baseBuildingWindow != null && this.enabled && isVisible && Singleton<BuildingManager>.exists && ((Singleton<SimulationManager>.instance.m_currentFrameIndex & 15u) == 15u || selectedBuilding != building))
				//					{
				//						BuildingManager instance = Singleton<BuildingManager>.instance;
				//						this.UpdateBuildingInfo(building, instance.m_buildings.m_buffer[(int)building]);
				//						selectedBuilding = building;
				//					}
			}
		}

		void SaveDescription(string desc)
		{
			if (!m_allowEvents)
				return;
			int buildIndex = m_info.GetResilientBuildingIndex (m_currentSelectedBuildingID);
			if (buildIndex != -1) {
				ResilientBuildings.ResilientInfo ri = m_info.m_resilients [buildIndex];
				ri.description = desc;
				m_info.m_resilients [buildIndex] = ri;
			}
		}

		/********** UI update methods ***************/

		void OnSelected()
		{
			//get selected building ID
			var buildingInfo = UIView.Find<UIPanel>("(Library) ZonedBuildingWorldInfoPanel");
			ZonedBuildingWorldInfoPanel baseBuildingWindow = buildingInfo.gameObject.transform.GetComponentInChildren<ZonedBuildingWorldInfoPanel>();
			FieldInfo baseSub = baseBuildingWindow.GetType().GetField("m_InstanceID", BindingFlags.NonPublic | BindingFlags.Instance);
			InstanceID instanceId = (InstanceID)baseSub.GetValue(baseBuildingWindow);
			if (instanceId.Type == InstanceType.Building && instanceId.Building != 0) {
				m_currentSelectedBuildingID = instanceId.Building;
			} else
				m_currentSelectedBuildingID = 0;

			int buildIndex = m_info.GetResilientBuildingIndex (m_currentSelectedBuildingID);
			m_allowEvents = false;
			if (buildIndex != -1) {
				m_resilientCheckBox.isChecked = true;
				m_descriptionTextField.text = m_info.m_resilients [buildIndex].description;
				m_zonedBuildingInfoPanel.component.height = m_zonedBuildingInfoPanelInitialHeight + m_descriptionTextField.height;
				//m_descriptionTextField.isVisible = true;
			} else {
				m_resilientCheckBox.isChecked = false;
				//m_descriptionTextField.isVisible = false;
			}

			m_allowEvents = true;
		}

		public void ResizePanelHeight(float desc_height)
		{
			m_zonedBuildingInfoPanel.component.height = m_zonedBuildingInfoPanelInitialHeight + desc_height;
		}


		/*********** custom icons *************/

		UITextureAtlas CreateTextureAtlas(string textureFile, string atlasName, Material baseMaterial, int spriteWidth, int spriteHeight, string[] spriteNames) {

			Texture2D tex = new Texture2D(spriteWidth * spriteNames.Length, spriteHeight, TextureFormat.ARGB32, false);
			tex.filterMode = FilterMode.Bilinear;

			{ // LoadTexture
				System.Reflection.Assembly assembly = System.Reflection.Assembly.GetExecutingAssembly();
				System.IO.Stream textureStream = assembly.GetManifestResourceStream("Crossings." + textureFile);

				byte[] buf = new byte[textureStream.Length];  //declare arraysize
				textureStream.Read(buf, 0, buf.Length); // read from stream to byte array

				tex.LoadImage(buf);

				tex.Apply(true, true);
			}

			UITextureAtlas atlas = ScriptableObject.CreateInstance<UITextureAtlas>();

			{ // Setup atlas
				Material material = (Material)Material.Instantiate(baseMaterial);
				material.mainTexture = tex;

				atlas.material = material;
				atlas.name = atlasName;
			}

			// Add sprites
			for (int i = 0; i < spriteNames.Length; ++i) {
				float uw = 1.0f / spriteNames.Length;

				var spriteInfo = new UITextureAtlas.SpriteInfo() {
					name = spriteNames[i],
					texture = tex,
					region = new Rect(i * uw, 0, uw, 1),
				};

				atlas.AddSprite(spriteInfo);
			}

			return atlas;
		}
	

	}
}

