//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using ColossalFramework;
using ColossalFramework.Globalization;
using ColossalFramework.UI;

namespace ResilientOwners
{
	public class ResilientUI : MonoBehaviour
	{

		ResilientBuildings m_info;

		ZonedBuildingWorldInfoPanel m_zonedBuildingInfoPanel;
		UIComponent m_bookInfoPanel;
		UIPanel m_extendedBuildingInfo;

		float m_bookInfoPanelInitialHeight = 0f;
		float m_bookInfoPanelLeftMargin = 20f;
		float m_bookInfoPanelLeftMarginPage2;
		float m_bookInfoPanelRightPadding = 20f;
		float m_bookInfoPanelPageWidth;
		float m_bookInfoPanelVerticalPadding = 20f;

		//Color32 m_bookTextColor = new Color32(148,175,199,255);
		//Color32 m_bookTextColor = new Color32(199,131,50,255);
		Color32 m_bookTextColor = Color.white;

		UILabel m_historyTitleLabel;
		UILabel m_recordTitleLabel;
		UIMultilineTextField m_descriptionTextField;
		StatesButton m_resilientStateButton;
		UILabel m_familiesHistoryLabel;
		UILabel m_activatedDateLabel;
		UILabel m_ageLabel;
		UILabel m_statsLabel;

		UICurrencyWrapper income =  new UICurrencyWrapper(0L);
		//UIGoodsWrapper industryGoods =  new UIGoodsWrapper(0);
		UIGoodsWrapper industryGoods2 =  new UIGoodsWrapper(0);

		ushort m_currentSelectedBuildingID;

		public static ResilientUI Install(GameObject resilientGO, ResilientBuildings info, UIPanel extendedBuildingInfo)
		{
			ResilientUI rui = resilientGO.AddComponent<ResilientUI>();
			//ResilientUI rui = new ResilientUI();
			rui.m_info = info;

			rui.m_zonedBuildingInfoPanel = GameObject.Find("(Library) ZonedBuildingWorldInfoPanel").GetComponent<ZonedBuildingWorldInfoPanel>();

			if(extendedBuildingInfo != null)
			{
				rui.m_extendedBuildingInfo = extendedBuildingInfo;
				try {
					rui.referenceExtendedBuildingsInfoModUIelements();
				}
				catch(Exception e)
				{
					CODebug.Error (LogChannel.Modding, Mod.modName+" - error referencing component of ExtendedBuildingsInfo mod");
				}
			}

			rui.AddComponents();

			return rui;
		}

		public static void Uninstall(ResilientUI rui)
		{

		}

		/********** UI building ***********/

		void AddComponents()
		{
			BookPanel bp = this.gameObject.AddComponent<BookPanel>();
			bp.transform.parent = m_zonedBuildingInfoPanel.component.transform;
			bp.size = new Vector3(m_zonedBuildingInfoPanel.component.size.x, m_zonedBuildingInfoPanel.component.size.y);
			bp.position = new Vector3(-bp.size.x-m_bookInfoPanelLeftMargin, +bp.size.y);
            //bp.position = new Vector3(-512, -512);

			m_bookInfoPanelInitialHeight = bp.height;
			m_bookInfoPanelPageWidth = bp.size.x/2 - m_bookInfoPanelLeftMargin - m_bookInfoPanelRightPadding;
			m_bookInfoPanelLeftMarginPage2 = bp.size.x/2 + m_bookInfoPanelLeftMargin;

			m_bookInfoPanel = bp;

			m_historyTitleLabel = m_bookInfoPanel.AddUIComponent<UILabel> ();
			m_historyTitleLabel.name = "History Title";
			m_historyTitleLabel.textScale = 1.2f;
			m_historyTitleLabel.text = Localization.trad.GetHistoryTitle();
			m_historyTitleLabel.textColor = m_bookTextColor;

			m_recordTitleLabel = m_bookInfoPanel.AddUIComponent<UILabel> ();
			m_recordTitleLabel.name = "Record Title";
			m_recordTitleLabel.textScale = 1.2f;
			m_recordTitleLabel.text = Localization.trad.GetRecordTitle();
			m_recordTitleLabel.textColor = m_bookTextColor;

			m_descriptionTextField = m_bookInfoPanel.AddUIComponent<UIMultilineTextField> ();
			m_descriptionTextField.name = "Building Description";
			m_descriptionTextField.text = "Enter description";
			m_descriptionTextField.textScale = 0.8f;
			m_descriptionTextField.width = m_bookInfoPanelPageWidth;
			m_descriptionTextField.height = 100f;
			m_descriptionTextField.disabledTextColor = new Color32(7, 7, 7, 255);
			m_descriptionTextField.textColor = m_bookTextColor;
			//m_descriptionTextField.font = UIDynamicFont.FindByName("ArchitectsDaughter");
			m_descriptionTextField.eventTextSubmitted += (component, param) =>
			{
				SaveDescription(param);
			};
//			m_descriptionTextField.title = "Description";
//			m_descriptionTextField.showTitle = true;
			m_descriptionTextField.defaultText = Localization.trad.GetDescriptionEmpty();
			m_descriptionTextField.eventHeightChange += (component, height) => {
				ResizePanelHeight();
			};

			int spriteWidth = 32;
			int spriteHeight = 32;
			string[] tooltips = {
				Localization.trad.GetTooltipOff(), 
				Localization.trad.GetTooltipHistoryOn(),
				Localization.trad.GetTooltipResiliencyOn()
			};
			m_resilientStateButton = new StatesButton(m_zonedBuildingInfoPanel.component, spriteWidth, spriteHeight, 3, "icons.book.png", "ResilientOwners", tooltips);

			m_resilientStateButton.msb.eventActiveStateIndexChanged += (component, value) => {

				if(!m_allowEvents)
					return;

				switch(value)
				{
				case 0:
					m_info.UnsuscribeBuilding(m_currentSelectedBuildingID);
					HideHistory();
					break;
				case 1:
					m_info.AddBuilding(m_currentSelectedBuildingID, false);
					ShowHistory();
					break;
				case 2:
					m_info.AddBuilding(m_currentSelectedBuildingID, true);
					ShowHistory();
					break;
				}
			};
			m_resilientStateButton.msb.AlignTo(m_zonedBuildingInfoPanel.component, UIAlignAnchor.TopRight);
			m_resilientStateButton.msb.relativePosition += new Vector3 (-50f, 90f, 0f);

			m_familiesHistoryLabel = m_bookInfoPanel.AddUIComponent<UILabel> ();
			m_familiesHistoryLabel.name = "Families History";
			m_familiesHistoryLabel.text = Localization.trad.GetEmptyHouse();
			//m_familiesHistoryLabel.textScale = 0.8f;
			m_familiesHistoryLabel.textColor = m_bookTextColor;
			m_familiesHistoryLabel.width = m_bookInfoPanelPageWidth;
			m_familiesHistoryLabel.wordWrap = true;
			m_familiesHistoryLabel.autoSize = false;
			m_familiesHistoryLabel.autoHeight = true;

			m_activatedDateLabel = m_bookInfoPanel.AddUIComponent<UILabel> ();
			m_activatedDateLabel.name = "Activation Date";
			m_activatedDateLabel.text = Localization.trad.GetActivationDate();
			m_activatedDateLabel.textScale = 0.8f;
			m_activatedDateLabel.textColor = m_bookTextColor;
			m_activatedDateLabel.width = m_bookInfoPanelPageWidth;

			m_ageLabel = m_bookInfoPanel.AddUIComponent<UILabel> ();
			m_ageLabel.name = "Age";
			m_ageLabel.text = Localization.trad.GetActivationDate();
			//m_activatedDateLabel.textScale = 0.8f;
			m_ageLabel.textColor = m_bookTextColor;
			m_ageLabel.width = m_bookInfoPanelPageWidth;

			m_statsLabel = m_bookInfoPanel.AddUIComponent<UILabel> ();
			m_statsLabel.name = "Stats";
			m_statsLabel.text = Localization.trad.GetEmptyHouse();//long enough string
			//m_statsLabel.textScale = 0.8f;
			m_statsLabel.textColor = m_bookTextColor;
			m_statsLabel.width = m_bookInfoPanelPageWidth;
			m_statsLabel.wordWrap = true;
			m_statsLabel.autoSize = false;
			m_statsLabel.autoHeight = true;

			placeComponents();

//			m_zonedBuildingInfoPanel.component.eveeventVisibilityChanged +=(component, param) =>
//			{
//				if(param)
//					OnSelected();
//			};

			//m_zonedBuildingInfoPanel.m_IsEmbbeded = true;//one of the condition call to OnPositionChanged, ensure it
			m_zonedBuildingInfoPanel.component.eventPositionChanged += (inst1, inst2) =>
			{
				if(m_zonedBuildingInfoPanel.component.isVisible)
					OnSelected();
			};

			m_zonedBuildingInfoPanel.component.eventOpacityChanged += (inst1, inst2) =>
			{
				if(m_zonedBuildingInfoPanel.component.isVisible)
					OnSelected();
			};


		}

		/********** Event Handlers ***************/

		bool m_allowEvents = true;
		void SaveDescription(string desc)
		{
			if (!m_allowEvents)
				return;
			int buildIndex = m_info.GetResilientBuildingIndex (m_currentSelectedBuildingID);
			if (buildIndex != -1) {
				ResilientBuildings.ResilientInfoV1 ri = m_info.m_resilients [buildIndex];
				ri.description = desc;
				m_info.m_resilients [buildIndex] = ri;
			}
		}

		/********** UI update methods ***************/

		void OnSelected()
		{
			//get selected building ID (after waiting it has been actualized)
			FieldInfo baseSub = m_zonedBuildingInfoPanel.GetType().GetField("m_InstanceID", BindingFlags.NonPublic | BindingFlags.Instance);
			InstanceID instanceId = (InstanceID)baseSub.GetValue(m_zonedBuildingInfoPanel);
			if (instanceId.Type == InstanceType.Building && instanceId.Building != 0) {
				if(m_currentSelectedBuildingID == instanceId.Building) //no update needed
					return;
				m_currentSelectedBuildingID = instanceId.Building;
			} else
			{
				m_currentSelectedBuildingID = 0;
			}

			int buildIndex = m_info.GetResilientBuildingIndex (m_currentSelectedBuildingID);
			m_allowEvents = false;
			if (buildIndex != -1) {
				if(m_info.m_resilients[buildIndex].resiliencyActivated)
					m_resilientStateButton.SetState(2);
				else
					m_resilientStateButton.SetState(1);
				ShowHistory();
				CheckUpdateUI(m_currentSelectedBuildingID);
			} else {
				m_resilientStateButton.SetState(0);
				HideHistory();
			}

			m_allowEvents = true;


			//m_bookInfoPanel.Invalidate();
		}

		public void HideHistory()
		{
			m_bookInfoPanel.isVisible = false;
			if(m_extendedBuildingInfo != null)
			{
				showDescriptionExtendedBuildingsInfo();
			}
			//m_zonedBuildingInfoPanelComponent.height = m_zonedBuildingInfoPanelInitialHeight;
		}

		public void ShowHistory()
		{
			int buildIndex = m_info.GetResilientBuildingIndex (m_currentSelectedBuildingID);

			m_descriptionTextField.text = m_info.m_resilients [buildIndex].description;

			if(m_extendedBuildingInfo != null)
			{
				StartCoroutine(updateWithExtendedBuildingsInfoPresent(buildIndex));
			}

			m_activatedDateLabel.text = Localization.trad.GetActivationDate() + m_info.m_resilients [buildIndex].activatedDate.Date.ToString("y");

			if(Singleton<BuildingManager>.instance.m_buildings.m_buffer[m_currentSelectedBuildingID].Info.m_class.m_service == ItemClass.Service.Residential)
			{
				m_statsLabel.isVisible = false;
				m_familiesHistoryLabel.AlignTo(m_bookInfoPanel, UIAlignAnchor.TopLeft);
				m_familiesHistoryLabel.relativePosition += new Vector3 (m_bookInfoPanelLeftMarginPage2, m_recordTitleLabel.height+m_ageLabel.height+ 5*m_bookInfoPanelVerticalPadding, 0f);
			}
			else
			{
				m_statsLabel.isVisible = true;
				m_familiesHistoryLabel.AlignTo(m_bookInfoPanel, UIAlignAnchor.TopLeft);
				m_familiesHistoryLabel.relativePosition += new Vector3 (m_bookInfoPanelLeftMarginPage2, m_recordTitleLabel.height+m_ageLabel.height+m_statsLabel.height + 7*m_bookInfoPanelVerticalPadding, 0f);
			}

			m_bookInfoPanel.isVisible = true;

			m_descriptionTextField.AutoHeight();
		}

		void placeComponents()
		{
			m_historyTitleLabel.AlignTo(m_bookInfoPanel, UIAlignAnchor.TopLeft);
			m_historyTitleLabel.relativePosition += new Vector3 (m_bookInfoPanelLeftMargin, m_bookInfoPanelVerticalPadding, 0f);

			m_descriptionTextField.AlignTo(m_bookInfoPanel, UIAlignAnchor.TopLeft);
			m_descriptionTextField.relativePosition += new Vector3 (m_bookInfoPanelLeftMargin, 2*m_bookInfoPanelVerticalPadding+m_historyTitleLabel.height, 0f);

			m_activatedDateLabel.AlignTo(m_bookInfoPanel, UIAlignAnchor.BottomLeft);
			m_activatedDateLabel.relativePosition += new Vector3 (m_bookInfoPanelLeftMargin+m_bookInfoPanelPageWidth/4f, -m_bookInfoPanelVerticalPadding, 0f);


			m_recordTitleLabel.AlignTo(m_bookInfoPanel, UIAlignAnchor.TopRight);
			m_recordTitleLabel.relativePosition += new Vector3 (-m_bookInfoPanelLeftMargin, m_bookInfoPanelVerticalPadding, 0f);

			m_familiesHistoryLabel.AlignTo(m_bookInfoPanel, UIAlignAnchor.TopLeft);
			m_ageLabel.AlignTo(m_bookInfoPanel, UIAlignAnchor.TopLeft);
			m_statsLabel.AlignTo(m_bookInfoPanel, UIAlignAnchor.TopLeft);

			m_ageLabel.relativePosition += new Vector3 (m_bookInfoPanelLeftMarginPage2, m_recordTitleLabel.height+3*m_bookInfoPanelVerticalPadding, 0f);
			m_statsLabel.relativePosition += new Vector3 (m_bookInfoPanelLeftMarginPage2, m_recordTitleLabel.height+m_ageLabel.height + 5*m_bookInfoPanelVerticalPadding, 0f);
			m_familiesHistoryLabel.relativePosition += new Vector3 (m_bookInfoPanelLeftMarginPage2, m_recordTitleLabel.height+m_ageLabel.height+m_statsLabel.height + 7*m_bookInfoPanelVerticalPadding, 0f);

			m_statsLabel.width = m_bookInfoPanelPageWidth;
			m_familiesHistoryLabel.width = m_bookInfoPanelPageWidth;

		}

		public void ResizePanelHeight()
		{

			float desc_height = m_descriptionTextField.getComposedHeight() + 4*m_bookInfoPanelVerticalPadding + m_historyTitleLabel.height + m_activatedDateLabel.height;
			float hist_height = m_familiesHistoryLabel.height + m_ageLabel.height + m_statsLabel.height + 8*m_bookInfoPanelVerticalPadding + m_recordTitleLabel.height;

			float add_height = Mathf.Max(desc_height, hist_height);

			if(add_height > m_bookInfoPanel.height)
				m_bookInfoPanel.height = /*m_zonedBuildingInfoPanelInitialHeight + */add_height;
			else
				m_bookInfoPanel.height = m_bookInfoPanelInitialHeight;

		}

		public void CheckUpdateUI(ushort buildingID)
		{
			if(m_currentSelectedBuildingID != buildingID)
				return;

			int buildIndex = m_info.GetResilientBuildingIndex (m_currentSelectedBuildingID);
			if(buildIndex != -1)
			{

				BuildingInfo buildinfo = Singleton<BuildingManager>.instance.m_buildings.m_buffer[m_currentSelectedBuildingID].Info;
				switch(buildinfo.m_class.m_service)
				{
					case ItemClass.Service.Commercial:
						m_statsLabel.text = Localization.trad.GetClientsAmount() + m_info.m_resilients [buildIndex].totalVisits;
						break;
					case ItemClass.Service.Industrial:
						bool extractor = buildinfo.m_buildingAI.GetType().Equals(typeof(IndustrialExtractorAI));

						if(extractor)
						{
							//industryGoods.Check(m_info.m_resilients [buildIndex].goodsBuffer2, buildinfo.m_class.m_subService, true);
							industryGoods2.Check(m_info.m_resilients [buildIndex].goodsBuffer3, buildinfo.m_class.m_subService, true);
							m_statsLabel.text = Localization.trad.GetExtractedAmount() + industryGoods2.result;
						}
						else
						{
							//industryGoods.Check(m_info.m_resilients [buildIndex].goodsBuffer2, buildinfo.m_class.m_subService, false);
							industryGoods2.Check(m_info.m_resilients [buildIndex].goodsBuffer4, buildinfo.m_class.m_subService, false);
							m_statsLabel.text =Localization.trad.GetProducedAmount() + industryGoods2.result;
						}
						break;
					case ItemClass.Service.Office:
						income.Check(m_info.m_resilients [buildIndex].totalIncome);
						m_statsLabel.text = Localization.trad.GetAccumulatedIncome() + income.result;
						break;
				}

				if(Singleton<BuildingManager>.instance.m_buildings.m_buffer[m_currentSelectedBuildingID].Info.m_class.m_service == ItemClass.Service.Residential)
					m_familiesHistoryLabel.text = m_info.GetFamiliesList(buildIndex);
				else
					m_familiesHistoryLabel.text = m_info.GetWorkersHistoryList(buildIndex);

				m_ageLabel.text = dateSpan(m_info.m_resilients [buildIndex].activatedDate, Singleton<SimulationManager>.instance.m_currentGameTime);
			
	
			}
		}

		//sync info with extended building mod

		UILabel m_extendedBuildingInfoDescriptionLabel;
		UIButton m_extendedBuildingInfoDescriptionButton;

		void referenceExtendedBuildingsInfoModUIelements()
		{
			IList<UIComponent> comps = m_extendedBuildingInfo.components;
			int labels = 0;
			int buttons = 0;
			for(int i = 0; i < comps.Count; i++)
			{
				if(comps[i].GetType().Equals(typeof(UILabel)))
				{
					labels++;
					if(labels == 25)
					{
						m_extendedBuildingInfoDescriptionLabel = (UILabel)comps[i];
					}
				}
				if(comps[i].GetType().Equals(typeof(UIButton)))
				{
					buttons++;
					if(buttons == 1)
					{
						m_extendedBuildingInfoDescriptionButton = (UIButton)comps[i];
					}
				}
			}
			//m_extendedBuildingInfoDescriptionLabel = labels[labels.Length-1];

			//m_extendedBuildingInfoDescriptionButton = m_extendedBuildingInfo.gameObject.GetComponent<UIButton>();
		}

		IEnumerator updateWithExtendedBuildingsInfoPresent(int buildIndex)
		{
			yield return null;
			m_extendedBuildingInfoDescriptionButton.isVisible = true;
			yield return null;
			if(!m_extendedBuildingInfoDescriptionLabel.isVisible)
			{
				m_extendedBuildingInfoDescriptionButton.SimulateClick();
				m_extendedBuildingInfoDescriptionWasOn = false;
			}
			else
			{
				m_extendedBuildingInfoDescriptionWasOn = true;
			}
			yield return new WaitForSeconds(0.2f); //wait for text update
			if(m_info.m_resilients [buildIndex].description.Length == 0)
			{
				m_descriptionTextField.text = m_extendedBuildingInfoDescriptionLabel.text;
			}
			m_extendedBuildingInfoDescriptionButton.SimulateClick();
			m_extendedBuildingInfoDescriptionButton.isVisible = false;
		}

		bool m_extendedBuildingInfoDescriptionWasOn = false;
		void showDescriptionExtendedBuildingsInfo()
		{
			if (m_extendedBuildingInfoDescriptionButton == null)
				return;
			//m_extendedBuildingInfoDescriptionLabel.isVisible = true;
			if(m_extendedBuildingInfoDescriptionWasOn)
			{
				m_extendedBuildingInfoDescriptionButton.SimulateClick();
				m_extendedBuildingInfoDescriptionWasOn = false;
			}
			m_extendedBuildingInfoDescriptionButton.isVisible = true;
		}

		string dateSpan(DateTime ancient, DateTime recent)
		{
			DateTime zeroTime = new DateTime(1, 1, 1);

			TimeSpan span = recent - ancient;

			DateTime spanDate = zeroTime + span;

			// because we start at year 1 for the Gregorian 
			// calendar, we must subtract a year here.
			int years = spanDate.Year - 1;
			int days = spanDate.DayOfYear;

			return Localization.trad.GetAge(years, days);


		}
	}
}

