//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using UnityEngine;
using ColossalFramework;
using ColossalFramework.Globalization;
using ColossalFramework.UI;


namespace HistoricBuildings
{
    public class HistoricUI : MonoBehaviour
    {

        HistoricBuildings m_info;

        ZonedBuildingWorldInfoPanel m_zonedBuildingInfoPanel;
        StatesButton m_historicStateButton1;

        DistrictWorldInfoPanel m_districtInfoPanel;
        StatesButton m_historicStateButton2;

        ushort m_currentSelectedBuildingID;
        byte m_currentSelectedDistrictID;

        public static HistoricUI Install(GameObject resilientGO, HistoricBuildings info, UIPanel extendedBuildingInfo)
        {
            HistoricUI rui = resilientGO.AddComponent<HistoricUI>();
            //HistoricUI rui = new HistoricUI();
            rui.m_info = info;

            rui.m_zonedBuildingInfoPanel = GameObject.Find("(Library) ZonedBuildingWorldInfoPanel").GetComponent<ZonedBuildingWorldInfoPanel>();
            rui.m_districtInfoPanel = GameObject.Find("(Library) DistrictWorldInfoPanel").GetComponent<DistrictWorldInfoPanel>();

            rui.AddComponents();

            return rui;
        }

        public static void Uninstall(HistoricUI rui)
        {

        }

        /********** UI building ***********/

        void AddComponents()
        {
            int spriteWidth = 32;
            int spriteHeight = 32;
            string[] tooltips = {
                Localization.trad.GetTooltipOff(),
                 Localization.trad.GetTooltipHistoryOn()
            };
            m_historicStateButton1 = new StatesButton(m_zonedBuildingInfoPanel.component, spriteWidth, spriteHeight, 2, "icons.historic.png", "HistoricBuildings", tooltips);

            m_historicStateButton1.msb.eventActiveStateIndexChanged += (component, value) => {

                if (!m_allowEvents)
                    return;

                switch (value)
                {
                    case 0:
                        m_info.RemoveBuilding(m_currentSelectedBuildingID);
                        break;
                    case 1:
                        m_info.AddBuilding(m_currentSelectedBuildingID);
                        break;
                }
            };
            m_historicStateButton1.msb.AlignTo(m_zonedBuildingInfoPanel.component, UIAlignAnchor.TopRight);
            m_historicStateButton1.msb.relativePosition += new Vector3(-45f, 80f, 0f);

            m_zonedBuildingInfoPanel.component.eventPositionChanged += (inst1, inst2) =>
            {
                if (m_zonedBuildingInfoPanel.component.isVisible)
                    OnSelected();
            };

            m_zonedBuildingInfoPanel.component.eventOpacityChanged += (inst1, inst2) =>
            {
                if (m_zonedBuildingInfoPanel.component.isVisible)
                    OnSelected();
            };

            // district panel modifications

            string[] tooltips2 = {
                Localization.trad.GetTooltipDistrictOff(),
                Localization.trad.GetTooltipDistrictOn()
            };
            m_historicStateButton2 = new StatesButton(m_districtInfoPanel.component, spriteWidth, spriteHeight, 2, "icons.historic.png", "HistoricDistricts", tooltips2);

            m_historicStateButton2.msb.eventActiveStateIndexChanged += (component, value) => {

                if (!m_allowEvents)
                    return;

                switch (value)
                {
                    case 0:
                        m_info.RemoveDistrict(m_currentSelectedDistrictID);
                        break;
                    case 1:
                        m_info.AddDistrict(m_currentSelectedDistrictID);
                        break;
                }
            };
            m_historicStateButton2.msb.AlignTo(m_districtInfoPanel.component, UIAlignAnchor.TopRight);
            m_historicStateButton2.msb.relativePosition += new Vector3(-15f, 90f, 0f);

            m_districtInfoPanel.component.eventPositionChanged += (inst1, inst2) =>
            {
                if (m_districtInfoPanel.component.isVisible)
                    OnSelectedDistricts();
            };

            m_districtInfoPanel.component.eventOpacityChanged += (inst1, inst2) =>
            {
                if (m_districtInfoPanel.component.isVisible)
                    OnSelectedDistricts();
            };
        }

        /********** Event Handlers ***************/

        bool m_allowEvents = true;


        /********** UI update methods ***************/

        void OnSelected()
        {
            //get selected building ID (after waiting it has been actualized)
            FieldInfo baseSub = m_zonedBuildingInfoPanel.GetType().GetField("m_InstanceID", BindingFlags.NonPublic | BindingFlags.Instance);
            InstanceID instanceId = (InstanceID)baseSub.GetValue(m_zonedBuildingInfoPanel);
            if (instanceId.Type == InstanceType.Building && instanceId.Building != 0)
            {
                if (m_currentSelectedBuildingID == instanceId.Building) //no update needed
                    return;
                m_currentSelectedBuildingID = instanceId.Building;
            }
            else
            {
                m_currentSelectedBuildingID = 0;
            }

            m_allowEvents = false;
            if (m_info.buildings.ContainsKey(m_currentSelectedBuildingID))
            {
                m_historicStateButton1.SetState(1);
            }
            else
            {
                m_historicStateButton1.SetState(0);
            }
            m_allowEvents = true;
        }

        void OnSelectedDistricts()
        {
            //get selected building ID (after waiting it has been actualized)
            FieldInfo baseSub = m_districtInfoPanel.GetType().GetField("m_InstanceID", BindingFlags.NonPublic | BindingFlags.Instance);
            InstanceID instanceId = (InstanceID)baseSub.GetValue(m_districtInfoPanel);
            if (instanceId.Type == InstanceType.District && instanceId.District != 0)
            {
                if (m_currentSelectedDistrictID == instanceId.District) //no update needed
                    return;
                m_currentSelectedDistrictID = instanceId.District;
            }
            else
            {
                m_currentSelectedDistrictID = 0;
            }

            m_allowEvents = false;
            if (m_info.districts.ContainsKey(m_currentSelectedDistrictID))
            {
                m_historicStateButton2.SetState(1);
            }
            else
            {
                m_historicStateButton2.SetState(0);
            }
            m_allowEvents = true;
        }
    }

}

