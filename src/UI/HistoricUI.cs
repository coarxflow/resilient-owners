//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using UnityEngine;
using ColossalFramework;
using ColossalFramework.Globalization;
using ColossalFramework.UI;


namespace HistoricBuildings
{
    public class HistoricUI : MonoBehaviour
    {

        HistoricBuildings m_info;

        ZonedBuildingWorldInfoPanel m_zonedBuildingInfoPanel;
        StatesButton m_historicStateButton1;
        UICheckBox m_historicCheckBox1;

        DistrictWorldInfoPanel m_districtInfoPanel;
        StatesButton m_historicStateButton2;
        UICheckBox m_historicCheckBox2;

        ushort m_currentSelectedBuildingID;
        byte m_currentSelectedDistrictID;

        public static HistoricUI Install(GameObject resilientGO, HistoricBuildings info, UIPanel extendedBuildingInfo)
        {
            HistoricUI rui = resilientGO.AddComponent<HistoricUI>();
            //HistoricUI rui = new HistoricUI();
            rui.m_info = info;

            rui.m_zonedBuildingInfoPanel = GameObject.Find("(Library) ZonedBuildingWorldInfoPanel").GetComponent<ZonedBuildingWorldInfoPanel>();
            rui.m_districtInfoPanel = GameObject.Find("(Library) DistrictWorldInfoPanel").GetComponent<DistrictWorldInfoPanel>();

            rui.AddComponents();

            return rui;
        }

        public static void Uninstall(HistoricUI rui)
        {

        }

        /********** UI building ***********/

        void AddComponents()
        {
            m_historicCheckBox1 = UITemplateManager.Get("OptionsCheckBoxTemplate") as UICheckBox;

            m_zonedBuildingInfoPanel.component.AttachUIComponent(m_historicCheckBox1.gameObject);
            m_historicCheckBox1.text = "Historic";
            m_historicCheckBox1.AlignTo(m_zonedBuildingInfoPanel.component, UIAlignAnchor.TopLeft);
            m_historicCheckBox1.relativePosition += new Vector3(350f, 130f, 0f);

            m_historicCheckBox1.eventCheckChanged += (component, value) =>
            {
                if (!m_allowEvents)
                    return;

                if (value)
                {
                    m_info.AddBuilding(m_currentSelectedBuildingID);
                }
                else
                {
                    m_info.RemoveBuilding(m_currentSelectedBuildingID);
                }
            };
            
            //m_zonedBuildingInfoPanel.m_IsEmbbeded = true;//one of the condition call to OnPositionChanged, ensure it
            m_zonedBuildingInfoPanel.component.eventPositionChanged += (inst1, inst2) =>
            {
                if (m_zonedBuildingInfoPanel.component.isVisible)
                    OnSelected();
            };

            m_zonedBuildingInfoPanel.component.eventOpacityChanged += (inst1, inst2) =>
             {
                 if (m_zonedBuildingInfoPanel.component.isVisible)
                     OnSelected();
             };

            // district panel modifications

            m_historicCheckBox2 = UITemplateManager.Get("OptionsCheckBoxTemplate") as UICheckBox;

            m_districtInfoPanel.component.AttachUIComponent(m_historicCheckBox2.gameObject);
            m_historicCheckBox2.text = "Historic";
            m_historicCheckBox2.AlignTo(m_districtInfoPanel.component, UIAlignAnchor.TopLeft);
            m_historicCheckBox2.relativePosition += new Vector3(200f, 200f, 0f);
            m_historicCheckBox2.size = new Vector3(50f, 5f, 0f);
            m_historicCheckBox2.label.textScale = 0.5f;
            m_historicCheckBox2.label.textColor = Color.cyan;
            m_historicCheckBox2.checkedBoxObject.size = new Vector3(10f, 10f, 0f);

            m_historicCheckBox2.eventCheckChanged += (component, value) =>
            {
                if (!m_allowEvents)
                    return;

                if (value)
                {
                    m_info.AddDistrict(m_currentSelectedDistrictID);
                }
                else
                {
                    m_info.RemoveDistrict(m_currentSelectedDistrictID);
                }
            };

            //m_zonedBuildingInfoPanel.m_IsEmbbeded = true;//one of the condition call to OnPositionChanged, ensure it
            m_districtInfoPanel.component.eventPositionChanged += (inst1, inst2) =>
            {
                if (m_districtInfoPanel.component.isVisible)
                    OnSelectedDistricts();
            };

            m_districtInfoPanel.component.eventOpacityChanged += (inst1, inst2) =>
            {
                if (m_districtInfoPanel.component.isVisible)
                    OnSelectedDistricts();
            };
        }

        /********** Event Handlers ***************/

        bool m_allowEvents = true;


        /********** UI update methods ***************/

        void OnSelected()
        {
            //get selected building ID (after waiting it has been actualized)
            FieldInfo baseSub = m_zonedBuildingInfoPanel.GetType().GetField("m_InstanceID", BindingFlags.NonPublic | BindingFlags.Instance);
            InstanceID instanceId = (InstanceID)baseSub.GetValue(m_zonedBuildingInfoPanel);
            if (instanceId.Type == InstanceType.Building && instanceId.Building != 0)
            {
                if (m_currentSelectedBuildingID == instanceId.Building) //no update needed
                    return;
                m_currentSelectedBuildingID = instanceId.Building;
            }
            else
            {
                m_currentSelectedBuildingID = 0;
            }

            m_allowEvents = false;
            if (m_info.buildings.ContainsKey(m_currentSelectedBuildingID))
            {
                m_historicCheckBox1.isChecked = true;
                //m_historicStateButton1.SetState(1);
            }
            else
            {
                m_historicCheckBox1.isChecked = false;
                //m_historicStateButton1.SetState(0);
            }
            m_allowEvents = true;
        }

        void OnSelectedDistricts()
        {
            //get selected building ID (after waiting it has been actualized)
            FieldInfo baseSub = m_districtInfoPanel.GetType().GetField("m_InstanceID", BindingFlags.NonPublic | BindingFlags.Instance);
            InstanceID instanceId = (InstanceID)baseSub.GetValue(m_districtInfoPanel);
            if (instanceId.Type == InstanceType.District && instanceId.District != 0)
            {
                if (m_currentSelectedDistrictID == instanceId.District) //no update needed
                    return;
                m_currentSelectedDistrictID = instanceId.District;
            }
            else
            {
                m_currentSelectedDistrictID = 0;
            }

            m_allowEvents = false;
            if (m_info.districts.ContainsKey(m_currentSelectedDistrictID))
            {
                //m_historicStateButton2.SetState(1);
                m_historicCheckBox2.isChecked = true;
            }
            else
            {
                //m_historicStateButton2.SetState(0);
                m_historicCheckBox2.isChecked = false;
            }
            m_allowEvents = true;
        }
    }

}

